/**********************************************************************
Description: It defines the styles of custom elements available in CMT-UI css framework. Most of these
			 elements are also dependent on CMT-JS library. Though the JS implementation can also be done
			 for other standard libraries.

Dependencies: variables, mixins, transitions, transformation

Details: It defines the custom element styles as listed below:

* Icon picker     - The icon picker element allows users to pick an item. It depends on cmtIconPicker jQuery
*                   plugin available in CMT-JS framework.
*
* Select          - The custom select allows user to select an item. It override the default select ui dependent
*                   on browsers. It depends on cmtSelect jQuery plugin available in CMT-JS framework.
*
* Choice          - The choice allows user to select single or multiple options from available options. It include
*                   radio and checkbox html components and change their default behaviour by showing good looking
*                   icons instead of browser dependentent graphics. These are indepedent of JS and purely css solutions.
*
* Rating          - The rating element can be used to provide ratings.
*
* Switch          - It's an advanced and custom element overriding default behavoir of radio to act like a switch.
*
* Button          - This class turns an element into button and does not need any JS to work.
*
* Button Group    - It can be used to show a group of bottons placed absolutely at the corners of parent element. The
*                   parent element must use positioning i.e. absolute, relative etc in order to place group at
*                   appropriate postion.
*
* Splitter		  - The splitters can be used to split an element either vertically or horizontally.
*
***********************************************************************/

// == Icon Picker ===================

.icon-picker-wrap {
	width: 100%;

	.icon-picker {
		position: relative;
		display: inline-block;

		.picker-icon-wrap {
			display: inline-block;
			position: relative;
			width: 64px;
			height: 64px;
			text-align: center;
			cursor: pointer;
			background-color: $color-secondary;
			color: $color-secondary-text;
			@include transit-color-bkg-color( $transit-eio, $transit-time-small );

			&:hover {
				background-color: $color-btn;
				color: $color-btn-text;
			}

			.picker-icon {
				display: inline-block;
				height: 64px;
				line-height: 64px;
				font-size: 48px;
				cursor: pointer;
			}
		}

		.picker-icon-sets {
			display: none;
			position: absolute;
			left: 0;
			top: 64px;
			width: 264px;
			padding: 5px;
			height: 216px;
			background-color: $color-primary-d;
			z-index: 1000000;

			.picker-icon-wrap {
				margin: 2px;
				width: 48px;
				height: 48px;

				.picker-icon {
					display: inline-block;
					width: 48px;
					height: 48px;
					line-height: 48px;
					font-size: 36px;
					cursor: pointer;
				}
			}
		}
	}
}

// == Select ========================

.cmt-select-wrap {
	width: 100%;
	display: inline-block;

	// Hide native select
	select {
		display: none;
	}

	.cmt-select {
		position: relative;
		background-color: $color-field;

		// Select Value - default icon having width 32px. It can be changed based on icon dimensions.
		.cmt-selected {
			cursor: pointer;
			position: relative;
			z-index: 100000;
			padding-right: 1.5em;
			@include shadow-inset( 0, 0, 0, $color-shadow-inset, 1px );

			// text for selected value
			.s-text {
				display: inline-block;
				width: 100%;
				overflow: hidden;
				white-space: nowrap;
				text-align: left;
				color: $color-field-text;
				font-size: 1em;
				padding: 0.30em 0.25em;
			}

			// icon for select box
			.s-icon {
				position: absolute;
				top: 0;
				right: 0;
				display: inline-block;
				padding: 0.25em;
			}

			// disabled
			&.disabled {
				cursor: default;
			}
		}

		// Select options
		.cmt-select-list {
			position: absolute;
			width: 100%;
			background-color: $color-field;
			z-index: 100001;
			max-height: 180px;
			overflow-y: auto;
			@include shadow-inset( 0, 0, 0, $color-shadow-inset, 1px );

			li {
				width: 100%;
				overflow: hidden;
				cursor: pointer;
				background-color: $color-white;
				padding: 0.25em;
			}

			li:hover {
				color: $color-btn-text-a;
				background-color: $color-btn;
			}
		}
	}
}

.cmt-multiselect {
	position: relative;
	background-color: $color-field;

	// Select Value - default icon having width 32px. It can be changed based on icon dimensions.
	.cmt-selected {
		cursor: pointer;
		position: relative;
		z-index: 100000;
		padding-right: 1.5em;
		@include shadow-inset( 0, 0, 0, $color-shadow-inset, 1px );

		// text for selected value
		.s-text {
			display: inline-block;
			width: 100%;
			overflow: hidden;
			white-space: nowrap;
			text-align: left;
			color: $color-field-text;
			font-size: 1em;
			padding: 0.30em 0.25em;
		}

		// icon for select box
		.s-icon {
			position: absolute;
			top: 0;
			right: 0;
			display: inline-block;
			padding: 0.25em;
		}

		// disabled
		&.disabled {
			cursor: default;
		}
	}

	// Select options
	.cmt-select-list {
		position: absolute;
		width: 100%;
		background-color: $color-field;
		z-index: 100001;
		max-height: 180px;
		overflow-y: auto;
		display: none;
		@include shadow-inset( 0, 0, 0, $color-shadow-inset, 1px );

		li {
			width: 100%;
			overflow: hidden;
			cursor: pointer;
			background-color: $color-white;
			padding: 0.25em;
		}

		li:hover {
			color: $color-btn-text-a;
			background-color: $color-btn;
		}
	}
}

.cmt-select-native {
	position: relative;
	display: inline-block;

	// Decorate native select
	select {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		padding: 0.5em;
		cursor: pointer;
		padding-right: 1.8em;
		text-shadow: 0 0 0 #000;
	}

	select:-moz-focusring {
		color: transparent;
		text-shadow: 0 0 0 #000;
	}

	select::-ms-expand {
		display: none;
	}

	// Compatible with CMT-Icons and other frameworks
	.icon, .cmti, .fa {
		position: absolute;
		right: 0;
		border: none;
		box-shadow: none;
		outline: none;
		font-size: 1em;
		padding-top: 0.70em;
		padding-left: 0.20em;
		padding-right: 0.60em;
		margin: 0;
	}
}

// == Choice ========================

// Choices using radio or checkbox

.cmt-choice {

	input[type=checkbox],
	input[type=radio] {
		cursor: pointer;
		display: none;
	}

	label {
		cursor: pointer;
		padding: 0;
	}

	.label {
		margin-top: 0.25em;
	}

	// Normal State

	input[type=checkbox] + .label.pad-label::before,
	input[type=radio] + .label.pad-label::before {
		margin-right: 8px;
	}

	input[type=checkbox]+.label::before,
	input[type=radio]+.label::before {
		font-family: "cmti-core";
		font-weight: normal;
		color: gray;
		border-radius: 16px;
		display: inline-block;
		vertical-align: middle;
		margin-top: -5px;
		line-height: 13px;
	}

	// Checked State

	input[type=checkbox]:checked, input[type=checkbox]:focus,
	input[type=radio]:checked, input[type=radio]:focus {
		outline:none !important;
	}

	input[type=checkbox]:checked + .label::before,
	input[type=radio]:checked + .label::before {
		display: inline-block;
		background-color: #F5F8FC;
		color: $color-btn;
	}

	input[type=checkbox]:checked + .label,
	input[type=radio]:checked + .label {
		color: $color-btn-a;
	}

	// Hover State - Normal, Checked

	input[type=checkbox]:hover + .label::before, input[type=checkbox] + .label:hover::before, input[type=checkbox]:checked + .label::before,
	input[type=radio]:hover + .label::before, input[type=radio] + .label:hover::before, input[type=radio]:checked + .label::before {
		color: $color-btn-h;
	}

	// Disabled State

	input[type=checkbox]:disabled + .label::before,
	input[type=radio]:disabled + .label::before {
		background-color: #DDD !important;
		color: #BBB;
	}

	// Display Content - Icon

	input[type=radio] + .label::before, input[type=radio]:disabled + .label::before {
		content: "\e0a2";
	}

	input[type=radio]:checked + .label::before {
		content: "\e0a3";
	}

	input[type=checkbox] + .label::before, input[type=checkbox]:disabled + .label::before {
		content: "\3b";
	}

	input[type=checkbox]:checked + .label::before {
		content: "\3a";
	}
}

// == Rating ========================

.cmt-rating {
	text-align: left;

	.wrap-stars {

		.star {
			display: inline-block;
			padding: 0.30em;
			margin-bottom: 0.75rem;
			cursor: pointer;
		}
	}

	.wrap-messages {

		.star-message {
			display: none;
			padding: 0.30em;
			margin-bottom: 0.75rem;

			&.selected {
				display: inline-block;
			}
		}
	}
}

.cmt-rating-native {
	text-align: left;

	// Radio or Checkbox - these styles work together with cmt-choice

	input[type=checkbox] + .label.label-rating::before, input[type=radio] + .label.label-rating::before {
		margin-right: 8px;
	}

	input[type=radio] + .label::before, input[type=radio]:disabled + .label::before {
		content: "\e0f3";
	}

	input[type=radio]:checked+.label::before {
		content: "\e0f3";
	}
}

// == Switch ========================

// Reference: http://callmenick.com/post/css-toggle-switch-examples
.cmt-switch {
	position: relative;
	display: inline-block;

	.cmt-toggle {
		position: absolute;
		margin-left: -9999px;
		visibility: hidden;
	}

	.cmt-toggle + label {
		display: inline-block;
		position: relative;
		cursor: pointer;
		outline: none;
		user-select: none;
	}

	.cmt-toggle-round + label {
		width: 5em !important;
		height: 1.5em;
		padding: 0.5em;
		background-color: $color-primary-d;
		border-radius: 0.5em;
	}

	.cmt-toggle-round + label:before,
	.cmt-toggle-round + label:after {
	  display: inline-block;
	  position: absolute;
	  top: 1px;
	  left: 1px;
	  bottom: 1px;
	  content: "";
	}

	.cmt-toggle-round + label:before {
		right: 1px;
		background-color: $color-white;
		border-radius: 0.5em;
		@include transit-bkg-color( $transit-eio, $transit-time-medium );
	}

	.cmt-toggle-round + label:after {
		width: 1.5em;
		background-color: $color-blue;
		border-radius: 0.5em;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
		@include transit-margin( $transit-eio, $transit-time-medium );
	}

	.cmt-toggle-round:checked + label:before {
		background-color: $color-green;
	}

	.cmt-toggle-round:checked + label:after {
		margin-left: 3.5em;
	}
}

// == Button ========================

.btn {
	@extend %element-style;
	@extend %element-size;
	@extend %element-style-action;

	&.btn-auto {
		width: auto;
	}

	&.btn-25 {
		width: 25% !important;
	}

	&.btn-50 {
		width: 50% !important;
	}

	&.btn-75 {
		width: 75% !important;
	}

	&.btn-small {
		width: 80px !important;
	}

	&.btn-medium {
		width: 120px !important;
	}

	&.btn-large {
		width: 180px !important;
	}

	&.btn-xlarge {
		width: 250px !important;
	}

	// White button with dark gray hover
	&.btn-white {
		background-color: $color-white;
		color: $color-black;

		&:hover {
			background-color: $color-gray-d;
			color: $color-gray-l;
		}
	}

	// Black button with dark gray hover
	&.btn-black {
		background-color: $color-black;
		color: $color-white;

		&:hover {
			background-color: $color-gray-d;
			color: $color-gray-l;
		}
	}

	// Gray button with dark gray hover
	&.btn-gray {
		background-color: $color-gray;
		color: $color-white;

		&:hover {
			background-color: $color-gray-d;
			color: $color-gray-l;
		}
	}

	&.btn-blue {
		background-color: $color-blue;

		&:hover {
			background-color: $color-blue-d;
		}
	}

	&.btn-purple {
		background-color: $color-purple;

		&:hover {
			background-color: $color-purple-d;
		}
	}

	&.btn-orange {
		background-color: $color-orange;

		&:hover {
			background-color: $color-orange-d;
		}
	}

	&.btn-yellow {
		background-color: $color-yellow;

		&:hover {
			background-color: $color-yellow-d;
		}
	}

	&.btn-red {
		background-color: $color-red;

		&:hover {
			background-color: $color-red-d;
		}
	}

	&.btn-pink {
		background-color: $color-pink;

		&:hover {
			background-color: $color-pink-d;
		}
	}

	&.btn-magenta {
		background-color: $color-magenta;

		&:hover {
			background-color: $color-magenta-d;
		}
	}

	&.btn-green {
		background-color: $color-green;

		&:hover {
			background-color: $color-green-d;
		}
	}

	&.btn-brown {
		background-color: $color-brown;

		&:hover {
			background-color: $color-brown-d;
		}
	}

	&.btn-aqua {
		background-color: $color-aqua;

		&:hover {
			background-color: darken( $color-aqua, 15% );
		}
	}

	&.btn-golden {
		background-color: $color-golden;

		&:hover {
			background-color: darken( $color-golden, 15% );
		}
	}

	&.btn-silver {
		background-color: $color-silver;

		&:hover {
			background-color: darken( $color-silver, 15% );
		}
	}

	&.btn-maroon {
		background-color: $color-maroon;

		&:hover {
			background-color: darken( $color-maroon, 15% );
		}
	}

	&.btn-olive {
		background-color: $color-olive;

		&:hover {
			background-color: darken( $color-olive, 15% );
		}
	}

	&.btn-lime {
		background-color: $color-lime;

		&:hover {
			background-color: darken( $color-lime, 15% );
		}
	}

	&.btn-navy {
		background-color: $color-navy;

		&:hover {
			background-color: darken( $color-navy, 15% );
		}
	}

	// Reversed hover of button color and text for white, black and gray buttons
	&.btn-reverse {

		&:hover {
			background-color: $color-btn !important;
			color: $color-btn-text !important;
		}
	}
}

a.btn {
	color: $color-btn-text;
}

// == Icon Button ===================

.btn-icon {
	@extend %element-style;
	@extend %element-style-action;
}

// == Rounded Icon Button ===========

.btn-icon-o {
	position: absolute;
	top: 0.25em;
	right: 0.25em;
	width: 1.5em;
	height: 1.5em;
	line-height: 1.2em;
	display: inline-block;
	cursor: pointer;
	@include circled1( $color-tertiary, $color-tertiary-text );
	@include transit-bkg-color( $transit-eio, $transit-time-medium );

	.icon {
		font-size: 1em;
	}

	&:hover {
		background-color: $color-tertiary-d;
		color: $color-tertiary-text-d;
	}

	&.btn-icon-o-small {
		width: 2em;
		height: 2em;
		line-height: 1.6em;

		.icon {
			font-size: 1.5em;
		}
	}

	&.btn-icon-o-medium {
		width: 2.5em;
		height: 2.5em;
		line-height: 2.1em;

		.icon {
			font-size: 2em;
		}
	}

	&.btn-icon-o-large {
		width: 3em;
		height: 3em;
		line-height: 2.5em;

		.icon {
			font-size: 2.5em;
		}
	}
}

// == Button Group ==================

// parents using button group must use positioning.

.btn-group {

	&.btn-group-top-left {
		position: absolute;
		top: 0;
		left: 0;
		text-align: left;
	}

	&.btn-group-top-right {
		position: absolute;
		top: 0;
		right: 0;
		text-align: right;
	}

	&.btn-group-bottom-left {
		position: absolute;
		bottom: 0;
		left: 0;
		text-align: left;
	}

	&.btn-group-bottom-right {
		position: absolute;
		bottom: 0;
		right: 0;
		text-align: right;
	}

	& >.edit, & >.save, & >.delete {
		color: $color-btn;
		cursor: pointer;
		@include transit-color( $transit-eio, $transit-time-small );

		&:hover {
			color: $color-btn-h;
		}
	}
}

// == Splitter ======================

.splitter {
	margin: 0 auto;

	&.splitter-h {
		margin-top: 0.5em;
		margin-bottom: 0.5em;
		border-bottom: 1px solid $color-border;

		&.splitter-h-25 {
			width: 25%;
		}

		&.splitter-h-50 {
			width: 50%;
		}

		&.splitter-h-75 {
			width: 75%;
		}

		&.splitter-h-80 {
			width: 80%;
		}

		&.splitter-h-small {
			width: 25px;
		}

		&.splitter-h-medium {
			width: 50px;
		}

		&.splitter-h-large {
			width: 150px;
		}
	}

	&.splitter-v {
		border-right: 1px solid $color-border;
		width: 1px;

		&.splitter-v-25 {
			height: 25%;
		}

		&.splitter-v-50 {
			height: 50%;
		}

		&.splitter-v-75 {
			height: 75%;
		}

		&.splitter-v-80 {
			height: 80%;
		}

		&.splitter-v-small {
			height: 125px;
		}

		&.splitter-v-medium {
			height: 250px;
		}

		&.splitter-v-large {
			height: 500px;
		}
	}
}

// == Additionals ===================

.cmt-click {
	cursor: pointer;

	&.disabled {
		cursor: default;
	}
}

.list-radio {

	label {
		width: auto;
		clear: none;
	}
}
